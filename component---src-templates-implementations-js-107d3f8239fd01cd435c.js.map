{"version":3,"sources":["webpack:///./src/templates/implementations.js","webpack:///./src/components/list-of-implementers.js"],"names":["Implementations","location","data","markdownRemark","html","frontmatter","title","className","implementers","dangerouslySetInnerHTML","__html","query","ListOfImplementers","cls","ruleId","length","body","sort","a","b","organisation","localeCompare","map","toolName","reportUrl","getHyphenatedString","key","href","sortedRuleMappings","reduce","out","impl","actMapping","find","push","consistency","complete"],"mappings":"6FAAA,gIAiCeA,UAtBS,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,SAAqB,IAAXC,KACDC,eAA3BC,EADuC,EACvCA,KAAMC,EADiC,EACjCA,YAEd,OACC,kBAAC,IAAD,CAAQJ,SAAUA,GACjB,kBAAC,IAAD,CAAKK,MAAOD,EAAYC,QACxB,6BAASC,UAAU,wBAClB,4BAAKF,EAAYC,OAGjB,iCACC,uDACA,kBAAC,IAAD,CAAoBE,aAAcA,KAInC,yBAAKC,wBAAyB,CAAEC,OAAQN,QAQrC,IAAMO,EAAK,c,gHCsEHC,IAlGY,SAAC,GAA6C,IAAD,IAA1CJ,oBAA0C,MAA3B,GAA2B,MAAvBK,WAAuB,WAAbC,EAAa,EAAbA,OAC1D,IAAKN,EAAaO,OACjB,OACC,kBAAC,IAAD,CAAMF,IAAG,GAAMP,MAAK,qBAAwBU,KAAI,2DAIlD,IAAKF,EACJ,OACC,2BAAOP,UAAWM,GACjB,+BACC,4BACC,4CACA,oCACA,wCAGF,+BACEL,EACCS,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,aAAaC,cAAcF,EAAEC,iBAC9CE,KAAI,YAAiC,IAA9BF,EAA6B,EAA7BA,aAAcG,EAAe,EAAfA,SACfC,EAAS,mBAAsBC,IAAoBF,GACzD,OACC,wBAAIG,IAAKH,GACR,4BAAKH,GACL,4BAAKG,GACL,4BACC,uBAAGI,KAAMH,GAAT,sBAUT,IAiBMI,EAjBepB,EAAaqB,QAAO,SAACC,EAAD,GAAoC,IAA5BP,EAA2B,EAA3BA,SAC1CQ,EADqE,EAAjBC,WAClCC,MAAK,SAAAF,GAAI,OAAIA,EAAKjB,SAAWA,KACrD,IAAKiB,EACJ,OAAOD,EAGR,IAAMN,EAAS,mBAAsBC,IAAoBF,GAA1C,OAA0DT,EAQzE,OAPAgB,EAAII,KAAK,CACRX,WACAY,YAAaJ,EAAKI,YAClBC,SAAUL,EAAKK,SACfZ,cAGMM,IACL,IAEqCb,MAAK,SAACC,EAAGC,GAChD,OAAID,EAAEiB,cAAgBhB,EAAEgB,YACE,eAAlBjB,EAAEiB,aAAgC,EAAI,EAE1CjB,EAAEkB,WAAajB,EAAEiB,SACblB,EAAEkB,UAAY,EAAI,EAEnBlB,EAAEK,SAASF,cAAcF,EAAEI,aAGnC,OACC,2BAAOhB,UAAWM,GACjB,+BACC,4BACC,oCACA,0CACA,wCACA,wCAGF,+BACEe,EAAmBN,KAAI,YAAqD,IAAlDC,EAAiD,EAAjDA,SAAUY,EAAuC,EAAvCA,YAAaC,EAA0B,EAA1BA,SAAUZ,EAAgB,EAAhBA,UAC3D,OACC,wBAAIE,IAAKH,GACR,4BAAKA,GACL,wBAAIhB,UAAU,cAAc4B,GAC5B,4BAAKC,EAAQ,YACb,4BACC,uBAAGT,KAAMH,GAAT,wB","file":"component---src-templates-implementations-js-107d3f8239fd01cd435c.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport ListOfImplementers from '../components/list-of-implementers'\n\nimport implementers from './../../_data/implementers'\n\nimport './implementations.scss'\n\nconst Implementations = ({ location, data }) => {\n\tconst { html, frontmatter } = data.markdownRemark\n\n\treturn (\n\t\t<Layout location={location}>\n\t\t\t<SEO title={frontmatter.title} />\n\t\t\t<section className=\"page-implementations\">\n\t\t\t\t<h1>{frontmatter.title}</h1>\n\n\t\t\t\t{/* Inject list of implementations table  */}\n\t\t\t\t<section>\n\t\t\t\t\t<h2>Implementation Overview</h2>\n\t\t\t\t\t<ListOfImplementers implementers={implementers} />\n\t\t\t\t</section>\n\n\t\t\t\t{/* Render the rest of th page  */}\n\t\t\t\t<div dangerouslySetInnerHTML={{ __html: html }} />\n\t\t\t</section>\n\t\t</Layout>\n\t)\n}\n\nexport default Implementations\n\nexport const query = graphql`\n\tquery($slug: String!) {\n\t\tmarkdownRemark(fields: { slug: { eq: $slug } }) {\n\t\t\thtml\n\t\t\tfrontmatter {\n\t\t\t\ttitle\n\t\t\t}\n\t\t}\n\t}\n`\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport getHyphenatedString from '../../utils/get-hyphenated-string'\n\nimport Note from './note'\n\nconst ListOfImplementers = ({ implementers = [], cls = ``, ruleId }) => {\n\tif (!implementers.length) {\n\t\treturn (\n\t\t\t<Note cls={``} title={`No Implementations`} body={`Implementation reports are not provided for this rule.`} />\n\t\t)\n\t}\n\n\tif (!ruleId) {\n\t\treturn (\n\t\t\t<table className={cls}>\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Organisation</th>\n\t\t\t\t\t\t<th>Tool</th>\n\t\t\t\t\t\t<th>Report</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t{implementers\n\t\t\t\t\t\t.sort((a, b) => a.organisation.localeCompare(b.organisation))\n\t\t\t\t\t\t.map(({ organisation, toolName }) => {\n\t\t\t\t\t\t\tconst reportUrl = `/implementation/${getHyphenatedString(toolName)}`\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<tr key={toolName}>\n\t\t\t\t\t\t\t\t\t<td>{organisation}</td>\n\t\t\t\t\t\t\t\t\t<td>{toolName}</td>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<a href={reportUrl}>View Report</a>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})}\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t)\n\t}\n\n\tconst ruleMappings = implementers.reduce((out, { toolName, actMapping }) => {\n\t\tconst impl = actMapping.find(impl => impl.ruleId === ruleId)\n\t\tif (!impl) {\n\t\t\treturn out\n\t\t}\n\n\t\tconst reportUrl = `/implementation/${getHyphenatedString(toolName)}#id-${ruleId}`\n\t\tout.push({\n\t\t\ttoolName,\n\t\t\tconsistency: impl.consistency,\n\t\t\tcomplete: impl.complete,\n\t\t\treportUrl,\n\t\t})\n\n\t\treturn out\n\t}, [])\n\n\tconst sortedRuleMappings = ruleMappings.sort((a, b) => {\n\t\tif (a.consistency !== b.consistency) {\n\t\t\treturn a.consistency === 'consistent' ? -1 : 1 // ascending with consistent followed by others\n\t\t}\n\t\tif (a.complete !== b.complete) {\n\t\t\treturn a.complete ? -1 : 1 // ascending with complete followed by others\n\t\t}\n\t\treturn a.toolName.localeCompare(b.toolName) //sort alphabetically as fallback\n\t})\n\n\treturn (\n\t\t<table className={cls}>\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>Tool</th>\n\t\t\t\t\t<th>Consitency</th>\n\t\t\t\t\t<th>Complete</th>\n\t\t\t\t\t<th>Report</th>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t{sortedRuleMappings.map(({ toolName, consistency, complete, reportUrl }) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<tr key={toolName}>\n\t\t\t\t\t\t\t<td>{toolName}</td>\n\t\t\t\t\t\t\t<td className=\"capitalize\">{consistency}</td>\n\t\t\t\t\t\t\t<td>{complete ? `Yes` : `No`}</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<a href={reportUrl}>View Report</a>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</tbody>\n\t\t</table>\n\t)\n}\n\nListOfImplementers.propTypes = {\n\timplementers: PropTypes.array.isRequired,\n\tcls: PropTypes.string,\n\truleId: PropTypes.string,\n}\n\nexport default ListOfImplementers\n"],"sourceRoot":""}